services:
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: dragonfly
    ports:
      - "6380:6379" # Exposes the Dragonfly port on localhost
    command: >
      --bind 0.0.0.0
    volumes:
      - dragonfly-data:/data # Optional: Persistence if enabled in future
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mongo:
    image: docker.io/mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  rabbitmq:
    image: docker.io/rabbitmq:3-management  # Use RabbitMQ image with the management plugin
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Port for RabbitMQ (AMQP protocol)
      - "15672:15672"  # Port for RabbitMQ Management Plugin (Web UI)
    environment:
      RABBITMQ_DEFAULT_USER: admin  # Default username
      RABBITMQ_DEFAULT_PASS: admin  # Default password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Persist RabbitMQ data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  rabbitmq_data:
  mongo_data:
  dragonfly-data: